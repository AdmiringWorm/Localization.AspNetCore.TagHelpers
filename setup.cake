#load "nuget:https://www.myget.org/F/cake-contrib/api/v2?package=Cake.Recipe&prerelease"
#addin "nuget:?package=Cake.Yarn&version=0.3.6"

Environment.SetVariableNames();

BuildParameters.SetParameters(
    context: Context,
    buildSystem: BuildSystem,
    sourceDirectoryPath: "./src",
    testDirectoryPath: "./test",
    title: "Localization.AspNetCore.TagHelpers",
    repositoryOwner: "WormieCorp",
    repositoryName: "Localization.AspNetCore.TagHelpers",
    appVeyorAccountName: "AdmiringWorm",
    solutionFilePath: "./Localization.AspNetCore.TagHelpers.sln",
    shouldRunInspectCode: false,
    shouldRunDotNetCorePack: true,
    shouldRunCodecov: true,
    shouldExecuteGitLink: IsRunningOnWindows() && BuildSystem.IsRunningOnAppVeyor // We need this so it doesn't fail on appveyor linux builds
);

ToolSettings.SetToolSettings(
    context: Context,
    dupFinderExcludePattern: new string[] {
        BuildParameters.RootDirectoryPath + "/test/**/*.cs",
        BuildParameters.SourceDirectoryPath + "/Localization.Demo"
    },
    dupFinderExcludeFilesByStartingCommentSubstring: new string[] {
        "<auto-generated>"
    },
    testCoverageFilter: "+[Localization.*]* -[*.Tests]*",
    testCoverageExcludeByAttribute: "*.ExcludeFromCodeCoverage*",
    testCoverageExcludeByFile: "*Designer.cs;*7*.g.cs;*.g.i.cs;*.g.cs"
);

Task("Client-Packages")
  .Does(() => {

  Yarn.FromPath("./src/Localization.Demo").Install();
})
  .OnError(exception =>
  {
    Warning("Unable to restore Client packages, but continuing with the rest of the tasks");
  });

BuildParameters.Tasks.DotNetCoreBuildTask.IsDependentOn("Client-Packages");

private const string codeCoveTool = "#tool nuget:https://www.myget.org/F/wormie-nugets/api/v2?package=Codecov&prerelease";

// We want to use a different version of codecov, as such we override the default one
BuildParameters.Tasks.UploadCodecovReportTask.Task.Actions.Clear();
BuildParameters.Tasks.UploadCodecovReportTask.Does(() => RequireTool(codeCoveTool, () => {
        var settings = new CodecovSettings {
            Files = new[] { BuildParameters.Paths.Files.TestCoverageOutputFilePath.ToString() },
            Required = true
        };
        if (BuildParameters.Version != null &&
            !string.IsNullOrEmpty(BuildParameters.Version.FullSemVersion) &&
            BuildParameters.IsRunningOnAppVeyor)
        {
            // Required to work correctly with appveyor because environment changes isn't detected until cake is done running.
            var buildVersion = string.Format("{0}.build.{1}",
                BuildParameters.Version.FullSemVersion,
                BuildSystem.AppVeyor.Environment.Build.Number);
            settings.EnvironmentVariables = new Dictionary<string, string> { { "APPVEYOR_BUILD_VERSION", buildVersion }};
        }

        Codecov(settings);
    }));

Build.RunDotNetCore();
