#!/bin/bash

VERSION=0.1.0

CONFIGURATION=Release
RESTORE=false
BUILD=false
TESTS=false
MONO=true
NETCORE=true

function error()
{
	(>&2 echo -e "\e[91mERROR: $1\e[39m")
}
function info()
{
	echo -e "\e[96m$1\e[39m"
}

function warn()
{
	(>&2 echo -e "\e[93mWARNING: $1\e[39m")
}

function version()
{
	echo "$0 v.0.1.0"
}

function usage()
{
	cat <<-EOF
USAGE: $0 [OPTIONS]

OPTIONS:
    -h	Shows this help text
    -v	Output the version of this build script

    -c	Sets the configuration for the build
      	[Possible Values: Debug,Release]
      	[deault: Release]

    -r	Enable restoring build packages
    -b	Build projects
    -t	Run Unit Tests

    -f	Build using the specified framework
      	[Possible values: all,netcore,mono]
      	[default: all]

NOTE:
    if no parameters are supplied it will restore, build and run unit tests
EOF
	return
}

while [ $OPTIND -le $# ]
do
	if getopts ":hvc:rbtf:" argument
	then
	  case $argument in
		h)
			usage
			exit 0
		;;
		v)
			version
			exit 0
		;;
		r)
			RESTORE=true
			info "Enabling restore packages"
		;;
		b)
			BUILD=true
			info "Enabling building"
		;;
		t)
			TESTS=true
			info "Enabling unit tests"
		;;
		c)
			case "${OPTARG}" in
				release|Release)
					CONFIGURATION=Release
				;;
				debug|Debug)
					CONFIGURATION=Debug
				;;
				*)
					error "Configuration '${OPTARG}' is unknown"
					usage
					exit 1
				;;
			esac
			info "Setting build configuration to ${CONFIGURATION}"
		;;
		f)
			case "${OPTARG}" in
				all|All)
					MONO=true
					NETCORE=true
				;;
				netcore|Netcore|NetCore|netCore)
					MONO=false
					NETCORE=true
				;;
				mono|Mono)
					MONO=true
					NETCORE=false
				;;
				*)
					error "Unknown framework: '${OPTARG}'"
					usage
					exit 2
				;;
			esac
		;;
		*)
			error "Argument '-${OPTARG}' was passed without an argument"
			usage
			exit 1
		;;
	  esac
	else
		let OPTIND++
	fi
done

if [ "$(which dotnet 2>/dev/null)" == "" ]; then
  error "dotnet executable not found."
  exit 3
fi

if [[ ("$RESTORE" == "false") && ("$BUILD" == "false") && ("$TESTS" == "false") ]]; then
	RESTORE=true
	BUILD=true
	TESTS=true
fi

if [ "$(which mono)" == "" ]; then
  warn "mono not found. Disabling..."
  MONO=false
fi

echo "RESTORE: ${RESTORE}"
echo "BUILD: ${BUILD}"
echo "TESTS: ${TESTS}"
echo "MONO: ${MONO}"
echo "NETCORE: ${NETCORE}"
echo "CONFIGURATION: ${CONFIGURATION}"

if [ "${RESTORE}" == "true" ]; then
	info "Restoring packages"
	bash .build/restore
	ret_code=$?
	if [ "$ret_code" != "0" ]; then
		exit $ret_code
	fi
fi

if [ "${BUILD}" == "true" ]; then
	info "Building projects"
	bash .build/build $CONFIGURATION $MONO $NETCORE
	ret_code=$?
	if [ "$ret_code" != "0" ]; then
		exit $ret_code
	fi
fi

if [ "${TESTS}" == "true" ]; then
	info "Running unit tests"
	bash .build/tests $CONFIGURATION $MONO $NETCORE
	ret_code=$?
	exit $ret_code
fi
